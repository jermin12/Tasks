{"version":3,"sources":["Newtask.js","Deleting.js","ClearAll.js","App.js","serviceWorker.js","index.js"],"names":["Newtask","props","handleChange","event","setState","text","target","value","submit","preventDefault","onsubmit","id","shortid","generate","state","className","onSubmit","this","type","name","placeholder","onChange","onClick","size","Component","Deleting","remove","ClearAll","clearing","list","length","App","clicking","item","todos","OnDelete","filter","todo","OnClear","style","overflowY","border","height","map","task","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OAyDeA,E,kDAjDb,WAAaC,GACZ,IAAD,8BACE,cAAMA,IAMRC,aAAgB,SAACC,GAEf,EAAKC,SAAS,CAACC,KAAMF,EAAMG,OAAOC,SATpC,EAYAC,OAAS,SAACL,GAERA,EAAMM,iBACN,EAAKR,MAAMS,SACT,CAAEC,GAAGC,IAAQC,WACXR,KAAK,EAAKS,MAAMT,OAGpB,EAAKD,SAAS,CACZC,KAAM,MAnBR,EAAKS,MAAQ,CACXT,KAAO,IAHX,E,qDA2BA,OACA,yBAAKU,UAAU,oBACd,2CAEA,6BACA,0BAAMC,SAAUC,KAAKT,QACrB,2BAAOO,UAAU,gCAAiCG,KAAK,OACtDC,KAAK,WAAWC,YAAY,aAAab,MAAOU,KAAKH,MAAMT,KAAMgB,SAAUJ,KAAKf,eACjF,4BAAQa,UAAU,6CAClBG,KAAK,SAAUI,QAASL,KAAKT,QAAQ,kBAAC,IAAD,CAAUe,KAAM,a,GAvClCC,aCSPC,G,KAVE,SAAC,GACjB,IADkBC,EACnB,EADmBA,OAElB,OACG,yBAAKX,UAAU,aAClB,4BAAQA,UAAU,qCAAqCG,KAAK,SAASI,QAASI,GAA9E,IAAuF,kBAAC,IAAD,CAASH,KAAM,KAAtG,QCYcI,EAjBE,SAAC,GACjB,IADkBC,EACnB,EADmBA,SAElB,OADD,EAD4BC,KAEnBC,OAAO,EAEZ,6BACH,4BAAQf,UAAU,+CAA+CG,KAAK,SAASI,QAASM,GAAxF,cAKC,6BACD,4BAAQb,UAAU,kDAAkDG,KAAK,SAASI,QAASM,GAA3F,eC+CcG,E,kDAtDd,aACC,IAAD,8BACC,gBAOFC,SAAW,SAAEC,GAEN,GAAe,KAAZA,EAAK5B,KAEN,OACH,EAAKD,SAAS,CACZ8B,MAAM,GAAD,mBAAK,EAAKpB,MAAMoB,OAAhB,CAAsBD,OAdlC,EAkBDE,SAAW,SAACxB,GAET,EAAKP,SAAS,CAAC8B,MAAO,EAAKpB,MAAMoB,MAAME,QAAO,SAAAC,GAAI,OAAIA,EAAK1B,KAAKA,QApBlE,EAuBD2B,QAAU,WAER,EAAKlC,SAAS,CAAC8B,MAAM,MAvBrB,EAAKpB,MAAO,CACToB,MAAO,IAHX,E,qDA6BA,IAAD,OAEC,OACC,yBAAKnB,UAAU,+BAA+BwB,MAAQ,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UACxG,kBAAC,EAAD,CAAShC,SAAUO,KAAKe,WAEtBf,KAAKH,MAAMoB,MAAMS,KAAI,SAAAC,GAAI,OACvB,6BACA,uBAAGC,IAAKD,EAAKjC,GAAII,UAAU,6DAA6D6B,EAAKvC,KAC5F,kBAAC,EAAD,CAAUqB,OAAQ,kBAAI,EAAKS,SAASS,EAAKjC,YAQhD,kBAAC,EAAD,CAAUkB,KAAMZ,KAAKH,MAAMoB,MAAON,SAAUX,KAAKqB,e,GAlDjCd,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e2af078a.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\n\r\nimport shortid from 'shortid';\r\n\r\nclass Newtask extends Component \r\n{ \r\n  constructor (props)\r\n  {\r\n    super(props)\r\n    this.state = {\r\n      text : ''\r\n   };\r\n  }\r\n\r\n  handleChange  = (event) =>\r\n  {\r\n    this.setState({text: event.target.value});\r\n  }\r\n\r\n  submit = (event)=>\r\n  { \r\n    event.preventDefault();\r\n    this.props.onsubmit(\r\n      { id:shortid.generate(),\r\n        text:this.state.text,\r\n     \r\n      });\r\n    this.setState({\r\n      text: \"\"\r\n      });\r\n}\r\n \r\n  render()\r\n  {\r\n  return (\r\n  <div className=\"tc fs-normal fw4\">\r\n   <h1>WORK TO-DOS</h1>\r\n\r\n   <div>\r\n   <form onSubmit={this.submit} >\r\n   <input className=\"mt4 br4 pa4 b--black shadow-3\"  type=\"text\"\r\n    name=\"TaskName\" placeholder=\"New item..\" value={this.state.text} onChange={this.handleChange} />\r\n   <button className='ma4 br2 b--none bg-dark-green dim shadow- ' \r\n   type=\"submit\"  onClick={this.submit}><TiPencil size={30}/></button>\r\n   </form>\r\n    \r\n   </div>\r\n\r\n  </div>\r\n  \r\n\r\n  );\r\n  }\r\n\r\n  }\r\nexport default Newtask;\r\n","import React from 'react';\r\nimport {TiTrash} from \"react-icons/ti\";\r\n\r\nimport 'tachyons';\r\n\r\nconst Deleting = ({remove})=>\r\n{ \r\n\treturn(\r\n    <div className=\"flex-auto\">\r\n\t<button className=\"ma2 fr pa2 b--none bg-light-yellow\" type=\"submit\" onClick={remove}> <TiTrash size={30}/> </button>\r\n   </div>\r\n\t)\r\n\t;}\r\n   \r\n\r\nexport default Deleting;","import React from 'react';\r\n\r\nimport 'tachyons';\r\n\r\nconst ClearAll = ({clearing,list})=>\r\n{ \r\n\tif(list.length>1)\r\n\treturn(\r\n    <div>\r\n\t<button className=\"ma2 fr pa2 b--none br-pill bg-dark-green dim\" type=\"submit\" onClick={clearing}>Clear All</button>\r\n   </div>\r\n\t);\r\nelse\r\n\treturn(\r\n\t <div>\r\n\t<button className=\"dn ma2 fr pa2 b--none br-pill bg-dark-green dim\" type=\"submit\" onClick={clearing}>Clear All</button>\r\n    </div>\r\n    );\r\n }\r\n   \r\n\r\nexport default ClearAll;","import React , {Component} from 'react';\nimport Newtask from './Newtask';\nimport 'tachyons';\nimport Deleting from './Deleting';\nimport ClearAll from './ClearAll';\nclass App extends Component {\n \n \n constructor()\n {\n  super()\n  this.state= {\n     todos: [],\n    }\n }\n\n\nclicking = ( item ) =>\n{  \n       if(item.text!==\"\")\n      \n       { return (\n      this.setState({\n        todos:[...this.state.todos,item]})\n      );\n   }\n      }\nOnDelete = (id) =>\n{ \n   this.setState({todos: this.state.todos.filter(todo => todo.id!==id )});\n };\n\nOnClear = () =>\n{\n  this.setState({todos:[]});\n}\n\nrender()\n{\n          \n return (\n  <div className=\"w-100 vh-100 bg-light-yellow\" style= {{overflowY:'scroll',border:'3px black solid',height:'800px'}}>\n    <Newtask onsubmit={this.clicking}/>\n\n    { this.state.todos.map(task=>\n      ( <div>\n        <p key={task.id} className=\" flex v-mid f4 lh-copy ma4 br4 pa1 b--dark-green shadow-3\">{task.text}\n         <Deleting remove={()=>this.OnDelete(task.id)}/>\n        </p>\n\n     </div>\n      )\n      )\n    }\n  \n  <ClearAll list={this.state.todos} clearing={this.OnClear}/> \n  </div>\n);\n \n\n}\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}